name: "Deploy stage"
on:
  workflow_call:
    inputs:
      terraform_version:
        description: "TF version"
        required: true
        type: string
      environment:
        description: "Environment to deploy to"
        required: true
        type: string

env:
  AWS_REGION: eu-west-2

jobs:
  deploy:
    name: "Deploy to ${{ inputs.environment }} environment"
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    timeout-minutes: 20
    concurrency:
      group: ${{ inputs.environment }}-env
      cancel-in-progress: false
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Tag or SHA"
        id: tag-or-sha
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "value=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "value=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
      - name: "Checkout code"
        uses: actions/checkout@v5
      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "${{ inputs.terraform_version }}"
      - name: "Configure AWS credentials for env"
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-session-name: GitHubActionsSession
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - name: "Download packages from dev S3 Artefacts bucket"
        if: ${{ inputs.environment == 'dev' }}
        run: |
          AWS_S3_ARTEFACTS_BUCKET="vita-${{ secrets.AWS_ACCOUNT_ID }}-artefacts-${{ inputs.environment }}"
          app_s3_path="s3://${AWS_S3_ARTEFACTS_BUCKET}/sha/${{ steps.tag-or-sha.outputs.value }}/open-next.zip"
          echo "Artefact path: $app_s3_path"
          aws s3 cp "$app_s3_path" .
          lambda_s3_path="s3://${AWS_S3_ARTEFACTS_BUCKET}/sha/${{ steps.tag-or-sha.outputs.value }}/lambda.zip"
          echo "Artefact path: $lambda_s3_path"
          aws s3 cp "$lambda_s3_path" .
      - name: "Download packages from ${{ inputs.environment}} S3 Releases bucket"
        if: ${{ contains(fromJSON('["prod", "preprod", "test"]'), inputs.environment) }}
        run: |
          AWS_S3_RELEASE_BUCKET="vita-${{ secrets.AWS_ACCOUNT_ID }}-releases-${{ inputs.environment }}"
          app_s3_path="s3://${AWS_S3_RELEASE_BUCKET}/tag/${{ steps.tag-or-sha.outputs.value }}/open-next.zip"
          echo "Artefact path: $app_s3_path"
          aws s3 cp "$app_s3_path" .
          lambda_s3_path="s3://${AWS_S3_RELEASE_BUCKET}/tag/${{ steps.tag-or-sha.outputs.value }}/lambda.zip"
          echo "Artefact path: $lambda_s3_path"
          aws s3 cp "$lambda_s3_path" .
          workflow_s3_path="s3://${AWS_S3_RELEASE_BUCKET}/tag/${{ steps.tag-or-sha.outputs.value }}/workflow.log"
          echo "Artefact path: $workflow_s3_path"
          aws s3 cp "$workflow_s3_path" .
      - name: "Unzip OpenNext Package"
        run: |
          unzip open-next.zip
          rm -rf open-next.zip
      - name: "Set that it is GitHub actions user"
        run: echo "TF_VAR_is_github_action=true" >> $GITHUB_ENV
      - name: "Set the Slack channel id where alarms are sent"
        run: echo "TF_VAR_alarms_slack_channel_id=${{ secrets.ALARMS_SLACK_CHANNEL_ID }}" >> $GITHUB_ENV
      - name: "Set the app version being deployed"
        run: echo "TF_VAR_app_version=${{ steps.tag-or-sha.outputs.value }}" >> $GITHUB_ENV
      - name: "Terraform init (shared)"
        id: init-shared
        run: TF_ENV=shared make terraform-init
      - name: "Terraform plan (shared)"
        id: plan-shared
        run: TF_ENV=shared make terraform-plan opts="-out=terraform-shared.tfplan"
      - name: "Terraform apply (shared)"
        id: apply-shared
        run: TF_ENV=shared make terraform-apply opts="-auto-approve" opts="terraform-shared.tfplan"
      - name: "Terraform init (app)"
        id: init-app
        run: TF_ENV=${{ inputs.environment }} make terraform-init
      - name: "Terraform plan (app)"
        id: plan-app
        run: TF_ENV=${{ inputs.environment }} make terraform-plan opts="-out=terraform-app.tfplan"
      - name: "Terraform apply (app)"
        id: apply-app
        run: TF_ENV=${{ inputs.environment }} make terraform-apply opts="-auto-approve" opts="terraform-app.tfplan"
