name: "CI/CD deploy"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: environment
        required: true
      tag:
        description: "The commit SHA (DEV) or version tag (higher envs) to be deployed"
        required: true

env:
  AWS_REGION: eu-west-2

jobs:
  metadata:
    name: "Set CI/CD metadata"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      build_datetime: ${{ steps.variables.outputs.build_datetime }}
      build_timestamp: ${{ steps.variables.outputs.build_timestamp }}
      build_epoch: ${{ steps.variables.outputs.build_epoch }}
      nodejs_version: ${{ steps.variables.outputs.nodejs_version }}
      python_version: ${{ steps.variables.outputs.python_version }}
      terraform_version: ${{ steps.variables.outputs.terraform_version }}
      version: ${{ steps.variables.outputs.version }}
      tag: ${{ steps.variables.outputs.tag }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep "^terraform" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          # TODO: Get the version, but it may not be the .version file as this should come from the CI/CD Pull Request Workflow
          echo "version=$(head -n 1 .version 2> /dev/null || echo unknown)" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
      - name: "List variables"
        run: |
          export BUILD_DATETIME="${{ steps.variables.outputs.build_datetime }}"
          export BUILD_TIMESTAMP="${{ steps.variables.outputs.build_timestamp }}"
          export BUILD_EPOCH="${{ steps.variables.outputs.build_epoch }}"
          export NODEJS_VERSION="${{ steps.variables.outputs.nodejs_version }}"
          export PYTHON_VERSION="${{ steps.variables.outputs.python_version }}"
          export TERRAFORM_VERSION="${{ steps.variables.outputs.terraform_version }}"
          export VERSION="${{ steps.variables.outputs.version }}"
          export TAG="${{ steps.variables.outputs.tag }}"
          make list-variables
  deploy:
    name: "Deploy to ${{ github.event.inputs.environment}} environment"
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    needs: [ metadata ]
    timeout-minutes: 20
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "${{ needs.metadata.outputs.terraform_version }}"
      - name: "Configure AWS credentials for env"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: GitHubActionsSession
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - name: "Download packages from dev S3 Artefacts bucket"
        if: ${{ github.event.inputs.environment == 'dev' }}
        run: |
          AWS_S3_ARTEFACTS_BUCKET="vita-${{ secrets.AWS_ACCOUNT_ID }}-artefacts-${{ github.event.inputs.environment }}"
          app_s3_path="s3://${AWS_S3_ARTEFACTS_BUCKET}/sha/${{ needs.metadata.outputs.tag }}/open-next.zip"
          echo "Artefact path: $app_s3_path"
          aws s3 cp "$app_s3_path" .
          lambda_s3_path="s3://${AWS_S3_ARTEFACTS_BUCKET}/sha/${{ needs.metadata.outputs.tag }}/lambda.zip"
          echo "Artefact path: $lambda_s3_path"
          aws s3 cp "$lambda_s3_path" .
      - name: "Download packages from ${{ github.event.inputs.environment}} S3 Releases bucket"
        if: ${{ github.event.inputs.environment == 'preprod' }}
        run: |
          AWS_S3_RELEASE_BUCKET="vita-${{ secrets.AWS_ACCOUNT_ID }}-releases-${{ github.event.inputs.environment }}"
          app_s3_path="s3://${AWS_S3_RELEASE_BUCKET}/tag/${{ needs.metadata.outputs.tag }}/open-next.zip"
          echo "Artefact path: $app_s3_path"
          aws s3 cp "$app_s3_path" .
          lambda_s3_path="s3://${AWS_S3_RELEASE_BUCKET}/tag/${{ needs.metadata.outputs.tag }}/lambda.zip"
          echo "Artefact path: $lambda_s3_path"
          aws s3 cp "$lambda_s3_path" .
          workflow_s3_path="s3://${AWS_S3_RELEASE_BUCKET}/tag/${{ needs.metadata.outputs.tag }}/workflow.log"
          echo "Artefact path: $workflow_s3_path"
          aws s3 cp "$workflow_s3_path" .
      - name: "Unzip OpenNext Package"
        run: |
          unzip open-next.zip
          rm -rf open-next.zip
      - name: "Set that it is GitHub actions user"
        run: echo "TF_VAR_is_github_action=true" >> $GITHUB_ENV
      - name: "Set the app version being deployed"
        run: echo "TF_VAR_app_version=${{ needs.metadata.outputs.tag }}" >> $GITHUB_ENV
      - name: "Terraform init"
        if: ${{ github.event.inputs.environment == 'dev' || github.event.inputs.environment == 'preprod' }}
        id: init
        run: TF_ENV=${{ github.event.inputs.environment }} make terraform-init
      - name: "Terraform plan"
        if: ${{ github.event.inputs.environment == 'dev' || github.event.inputs.environment == 'preprod' }}
        id: plan
        run: TF_ENV=${{ github.event.inputs.environment }} make terraform-plan opts="-out=terraform.tfplan"
      - name: "Terraform apply"
        if: ${{ github.event.inputs.environment == 'dev' || github.event.inputs.environment == 'preprod'  }}
        id: apply
        run: TF_ENV=${{ github.event.inputs.environment }} make terraform-apply opts="-auto-approve" opts="terraform.tfplan"

  # TODO: More jobs or/and steps here
  # success:
  #   name: "Success notification"
  #   runs-on: ubuntu-latest
  #   needs: [deploy]
  #   steps:
  #     - name: "Check prerequisites for notification"
  #       id: check
  #       run: echo "secret_exist=${{ secrets.TEAMS_NOTIFICATION_WEBHOOK_URL != '' }}" >> $GITHUB_OUTPUT
  #     - name: "Notify on deployment to an environment"
  #       if: steps.check.outputs.secret_exist == 'true'
  #       uses: nhs-england-tools/notify-msteams-action@v0.0.4
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         teams-webhook-url: ${{ secrets.TEAMS_NOTIFICATION_WEBHOOK_URL }}
  #         message-title: "Notification title"
  #         message-text: "This is a notification body"
  #         link: ${{ github.event.pull_request.html_url }}
